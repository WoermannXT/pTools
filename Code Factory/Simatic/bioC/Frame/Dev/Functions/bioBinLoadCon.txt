Load Control of multiple Drivers:
Max 8 Drivers
Rotating principal, if more load is needed, the next in row switch on, 
	and if less load is needed, the longest running switches off.
Release bit for each driver


Counting bits set, Brian Kernighan's way

unsigned int v; // count the number of bits set in v
unsigned int c; // c accumulates the total bits set in v
for (c = 0; v; c++)
{
  v &= v - 1; // clear the least significant bit set
}

Brian Kernighan's method goes through as many iterations as there are set bits. 
So if we have a 32-bit word with only the high bit set, then it will only go once through the loop.

Published in 1988, the C Programming Language 2nd Ed. (by Brian W. Kernighan and Dennis M. Ritchie) mentions this in exercise 2-9. On April 19, 2006 Don Knuth pointed out to me that this method "was first published by Peter Wegner in CACM 3 (1960), 322. (Also discovered independently by Derrick Lehmer and published in 1964 in a book edited by Beckenbach.)" 

Switch next ON
L	00000000 00001000	// Request Group
SLW	1
OW
=	00000000 00011000

Switch last OFF
L	00000000 00011000
SLW	1
AW
=	00000000 00010000

Check Release Map
L	00000000 01101111 	// Release Map
L	00000000 01111000	// Request Group
AW
==D
JCN RECOUNT
COUNT BITS
IF LESS 







RECOUNT: NOP 0




Verion 0.2

In:
SetP : Int;			// Number of Drivers to Run
ReleaseMap : Int;	// Map of Released Drivers (Bitmap)
Drvs : Int;			// Number of Drivers

InOut:
OnMap : Int;		// Map of Activated Range	
StartP : Int;		// Pointer to next Starting Device
remStat: DInt;		// Rem Status

Out:
Val : Int;			// Number of Drivers Activted
RunMap : Int;		// Map of Activated Drivers (Bitmap)

